#!/bin/sh
# the next line restarts using wish \
exec tclsh "$0" ${1+"$@"}

#
# Copyright (c) by Peter De Rijk (VIB - University of Antwerp)
# See the file "license.txt" for information on usage and redistribution of
# this file, and for a DISCLAIMER OF ALL WARRANTIES.
#

# see where we are, add the lib dir in the original location to auto_path, load extension
set script [file join [pwd] [info script]]
set scriptname [file tail $script]
while 1 {
	if {[catch {set script [file join [file dir $script] [file readlink $script]]}]} break
}

set appdir [file dir $script]
if {[lrange [file split $script] end-2 end] eq {apps cg cg.tcl}} {
	set appbasedir [file dir [file dir $appdir]]
	set auto_path [list $appbasedir/lib $appbasedir/lib/tcl8.5 $appbasedir/lib/tk8.5]
}
package require Extral

proc pathsep {} {
	if {$::tcl_platform(platform) eq "windows"} {return \;} else {return \:}
}

proc scywalkerenv {} {
	global auto_path env appdir tcl_dirtcl scywalkerdir externdir
	if {![info exists appdir]} {
		set appdir ${scywalker::dir}
	}
	if {[file dir [file dir $appdir]] eq [get tcl_dirtcl ""]} {
		# we are being run from a dirtcl installation in apps/scywalker
		set scywalkerdir $tcl_dirtcl
		set externdir $scywalkerdir/bin
		set bindir $appdir/bin
		set extradir $scywalkerdir/extra
		set cgdir $scywalkerdir
	} else {
		# we are being run from dev 
		set scywalkerdir $appdir
		set externdir $scywalkerdir/extern
		set bindir $scywalkerdir/bin
		set extradir $scywalkerdir/extra
		set cgdir [file dir $scywalkerdir]/genomecomb
	}
	# Setting LANG to "C" tells all unix tools (e.g. sort) to consider only basic ASCII characters and disable UTF-8 multibyte match
	# This can improve performance substantially
	set env(LANG) C
	set env(LC_ALL) C
	# add to paths
	set env(PATH) $cgdir[pathsep]$bindir[pathsep]$externdir[pathsep]$scywalkerdir[pathsep]$extradir[pathsep]$env(PATH)
	if {[info exists env(LD_LIBRARY_PATH)]} {
		set env(LD_LIBRARY_PATH) $::externdir/lib:$env(LD_LIBRARY_PATH)
	} else {
		set env(LD_LIBRARY_PATH) $::externdir/lib
	}
	set env(scywalkerdir) $scywalkerdir
	return $scywalkerdir
}

proc scywalker_help {} {
	lappend ::auto_path $::scywalkerdir/apps/cg/lib
	set help [file_read $::scywalkerdir/README.md]
	help scywalker md $help
}

scywalkerenv

# generic help on no args
if {[llength $argv] < 1} {
	puts stderr "format is: scywalker ?options? ?projectdir/sampledir?"
	exit 1
}

proc scywalker {args} {
	set remove {}
	set pos 0
	set options {}
	set preset scywalker
	set whitelist $::scywalkerdir/whitelists/3M-february-2018.txt.gz
	foreach {key value} $args {
		if {[string index $key 0] ne "-"} {
			break
		} elseif {$key eq "--"} {
			break
		}
		regsub ^-- $key - key
		if {$key eq "-preset"} {
			if {$value in "pacbio"} {
				set preset scywalker_pacbio
			} elseif {$value in "ont"} {
				set preset scywalker
			} else {
				error "wrong value \"$value\" given for scywalker -preset, must be one of: ont, pacbio"
			}
			lappend remove $pos [expr {$pos + 1}]
		} elseif {$key eq "-sc_whitelist"} {
			if {$value in "10Xv3 v3"} {
				set whitelist $::scywalkerdir/whitelists/3M-february-2018.txt.gz
			} elseif {$value in "10Xv4 v4"} {
				set whitelist $::scywalkerdir/whitelists/3M-3pgex-may-2023_TRU.txt.gz
			} elseif {$value in "10Xp5v3 p5v3"} {
				set whitelist $::scywalkerdir/whitelists/3M-5pgex-jan-2023.txt.gz
			} elseif {$value in "10Xv2 v2"} {
				set whitelist $::scywalkerdir/whitelists/737K-august-2016.txt.gz
			} elseif {$value in "multiome"} {
				set whitelist $::scywalkerdir/whitelists/737K-arc-gex-v1.txt.gz
			} elseif {$value in "multiome_atac"} {
				set whitelist $::scywalkerdir/whitelists/737K-arc-atac-v1.txt.gz
			} elseif {$value eq ""} {
				set whitelist ""
			} elseif {[file exists $value]} {
				set whitelist $value
			} else {
				error "given -sc_whitelist file \"$value\" does not exist, must be an existing file or one of: v4, p5v3, v3, v2"
			}
			lappend remove $pos [expr {$pos + 1}]
		}
		incr pos 2
	}
	if {[llength $remove]} {set args [list_sub $args -exclude $remove]}
	set dir [lindex $args end]
	if {$dir eq "help"} {
		scywalker_help
		return
	} elseif {$dir eq "version"} {
		set version [exec cg version]
		puts $version
		return $version
	}
	if {![file exists /usr/bin/which]} {
		puts stderr "The command \"which\" is not installed in /usr/bin, which is required (and could not be circumvented) by the R tools used by scywalker."
		puts stderr "Please install the which package before running scywalker, e.g. on a centos system you can do this using:"
		puts stderr "yum install -y which"
		exit 1
	}
	if {![file exists /etc/fonts/fonts.conf]} {
		puts stderr "fonts are not configured (/etc/fonts/fonts.conf does not exist) on this system."
		puts stderr "However this is required by the R tools used by scywalker."
		puts stderr "Please install the fontconfig package before running scywalker, e.g. on a centos system you can do this using:"
		puts stderr "yum install -y fontconfig"
		exit 1
	}
	if {![file exists $dir]} {
		if {"-samplesheet" ni $args} {
			puts stderr "The given directory \"$dir\" does not exist, and the option -samplesheet is not given to create it on the fly"
			exit 1
		}
		exec cg process_project \
			-preset $preset -sc_whitelist $whitelist \
			{*}$args >@ stdout 2>@ stderr
	} elseif {[file exists $dir/samples]} {
		exec cg process_project \
			-preset $preset -sc_whitelist $whitelist \
			{*}$args >@ stdout 2>@ stderr
	} elseif {![file exists $dir/fastq]} {
		if {"-samplesheet" in $args} {
			if {[file isdir $dir]} {
				exec cg process_project \
					-preset $preset -sc_whitelist $whitelist \
					{*}$args >@ stdout 2>@ stderr
			} else {
				puts stderr "It looks like you wanted to use the samplesheet option, but \"$dir\" already exist and is not a directory"
				exit 1
			}
		} else {
			puts stderr "The given directory \"$dir\" has no subdirectory fastq (which a sample directory should have), nor a subdirectory samples (which a project/experiment directory should have)"
			exit 1
		}
	} else {
		exec cg process_sample \
			-preset scywalker -sc_whitelist $whitelist \
			{*}$args >@ stdout 2>@ stderr
	}
}

scywalker {*}$argv
